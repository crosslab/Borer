##############################################################
# $CINTSYSDIR/src/Makefile.base
#
# Author                 Masaharu Goto 
# Copyright(c) 1995~2003 Masaharu Goto (MXJ02154@niftyserve$(OBJPOST)r.jp)
#
# Description:
#   This file is a base of cint library makefile. There are examples
#  of platform dependent setup information under platform
#  directory. Do following to create a complete Makefile,
#
#  $ cat ../platform/[YourPlatform] Makefile.base > Makefile
#
##############################################################
CINT_V6     = bc_autoobj$(OBJPOST) bc_cfunc$(OBJPOST) bc_inst$(OBJPOST) bc_parse$(OBJPOST) bc_reader$(OBJPOST) bc_type$(OBJPOST) bc_exec$(OBJPOST) bc_vtbl$(OBJPOST) bc_eh$(OBJPOST) bc_debug$(OBJPOST) bc_assign$(OBJPOST)

RFLXO       = rflx_gendict$(OBJPOST) rflx_gensrc$(OBJPOST) rflx_tools$(OBJPOST) Shadow$(OBJPOST)

#CINTSYSDIR   = ..
IPATH    = -I.. $(SYSIPATH)
MACRO    = $(SYSMACRO) $(OTHMACRO) 

############################################################################
# common variable definition 
############################################################################

SECURITYH =     security.h
DLLREVH =       dllrev.h

HEADERS =       common.h global.h fproto.h memtest.h sunos.h ../G__ci.h 

OBJECTS = 	$(PLATFORM) \
		$(STDLIBS) \
		$(APIO) \
		$(RFLXO) \
		$(CINT_V6) \
		v6_auxu$(OBJPOST) \
		v6_cast$(OBJPOST) \
		v6_debug$(OBJPOST) \
		v6_decl$(OBJPOST) \
		v6_disp$(OBJPOST) \
		v6_dump$(OBJPOST) \
		v6_end$(OBJPOST) \
		v6_error$(OBJPOST) \
		v6_expr$(OBJPOST) \
		v6_fread$(OBJPOST) \
		v6_func$(OBJPOST) \
		v6_gcoll$(OBJPOST) \
		v6_global1$(OBJPOST) \
		v6_global2$(OBJPOST) \
		g__cfunc$(OBJPOST) \
		v6_ifunc$(OBJPOST) \
		v6_inherit$(OBJPOST) \
		v6_init$(OBJPOST) \
		v6_input$(OBJPOST) \
		v6_intrpt$(OBJPOST) \
		v6_loadfile$(OBJPOST) \
		v6_macro$(OBJPOST) \
		v6_malloc$(OBJPOST) \
		v6_memtest$(OBJPOST) \
		v6_new$(OBJPOST) \
		v6_newlink$(OBJPOST) \
		v6_oldlink$(OBJPOST) \
		v6_opr$(OBJPOST) \
		v6_parse$(OBJPOST) \
		v6_pause$(OBJPOST) \
		v6_pcode$(OBJPOST) \
		v6_pragma$(OBJPOST) \
		v6_quote$(OBJPOST) \
		v6_scrupto$(OBJPOST) \
		v6_shl$(OBJPOST) \
		v6_sizeof$(OBJPOST) \
		v6_struct$(OBJPOST) \
		v6_stub$(OBJPOST) \
		v6_tmplt$(OBJPOST) \
		v6_typedef$(OBJPOST) \
		v6_val2a$(OBJPOST) \
		v6_value$(OBJPOST) \
		v6_var$(OBJPOST)

# Cint core as static library
$(CINTLIB) : $(OBJECTS)
	if test -r $(CINTLIB); then rm $(CINTLIB);fi
	$(AR) $(AROPT) $@ $(OBJECTS);
	-if [ -f "$(RANLIB)" ]; then $(RANLIB) $(CINTLIB); fi

# Cint core as shared library on Linux
$(CINTSYSDIR)/libcint.so : $(OBJECTS)
	$(LD) $(LDDLLOPT) $(SHLIB_OPT) -o $@ $(OBJECTS)

# Cint core as shared library on HP-UX
$(CINTSYSDIR)/libcint.sl : $(OBJECTS)
	$(LD) $(LDDLLOPT) $(SHLIB_OPT) -o $@ $(OBJECTS)

# Cint core as shared library on Cygwin
$(CINTSYSDIR)/libcint.dll : $(OBJECTS)
	$(LD) $(LDDLLOPT) $(SHLIB_OPT) -o $@ $(OBJECTS) $(LDOPT)
	$(DLLTOOL) --as=$(AS) --dllname $@ --def libcint.def --output-lib $(CINTSYSDIR)/libcint.lib

#	$(LDDLL) -s --base-file libcint.base $(LDDLLOPT) $(SHLIB_OPT) --dll -o $@ $(OBJECTS) $(LIBS) -e G__cygwin_dll_entry
#	$(DLLTOOL) --as=$(AS) --dllname $(OBJECT) --def libcint.def --base-file libcint.base --output-exp libcint.exp
#	$(LDDLL) -s --base-file libcint.base libcint.exp $(LDDLLOPT) $(SHLIB_OPT) --dll -o $@ $(OBJECTS) $(LIBS) -e G__cygwin_dll_entry
#	$(DLLTOOL) --as=$(AS) --dllname $(OBJECT) --def libcint.def --base-file libcint.base --output-exp libcint.exp
#	$(LDDLL) -s libcint.exp $(LDDLLOPT) $(SHLIB_OPT) --dll -o $@ $(OBJECTS) $(LIBS) -e G__cygwin_dll_entry
#	$(DLLTOOL) --as=$(AS) --dllname $@ --def libcint.def --output-lib $(CINTSYSDIR)/libcint.lib

############################################################################
# iostream library
############################################################################
# Common for many old C++ compilers
libstrm$(OBJPOST) : libstrm.cxx libstrm.h $(HEADERS) ../lib/stream/iostrm.h
	$(CPP) -I../lib/stream $(IPATH) $(MACRO) $(OPTIMIZE) -c libstrm.cxx

# Microsoft Visual C++ compiler
vcstrm$(OBJPOST) : vcstrm.cxx vcstrm.h $(HEADERS) ../lib/vcstream/iostrm.h
	$(CPP) -I../lib/vcstream $(IPATH) $(MACRO) $(OPTIMIZE) -c vcstrm.cxx

# QNX Dinkum STL
vc7strm$(OBJPOST) : vc7strm.cxx vc7strm.h $(HEADERS) ../lib/vc7strm/iostrm.h
	$(CPP) -I../lib/vc7strm $(IPATH) $(MACRO) $(OPTIMIZE) -c vc7strm.cxx

# Borland C++ compiler
bcstrm$(OBJPOST) : bcstrm.cxx bcstrm.h $(HEADERS) ../lib/bcsteam/iostrm.h
	$(CPP) -I../lib/bcstream $(IPATH) $(MACRO) $(OPTIMIZE) -c bcstrm.cxx

# Borland C++ Builder
cbstrm$(OBJPOST) : cbstrm.cpp cbstrm.h $(HEADERS) ../lib/cbsteam/iostrm.h
	$(CPP) -I../lib/cbstream $(IPATH) $(MACRO) $(OPTIMIZE) -c cbstrm.cpp

# KAI C++ compiler
kccstrm$(OBJPOST) : kccstrm.cxx kccstrm.h $(HEADERS)
	$(CPP) -I../lib/kccstream $(IPATH) $(MACRO) $(OPTIMIZE) -c kccstrm.cxx

# Sun CC5 compiler
sunstrm$(OBJPOST) : sunstrm.cxx sunstrm.h $(HEADERS) ../lib/snstream/iostrm.h
	$(CPP) -I../lib/snstream $(IPATH) $(MACRO) $(OPTIMIZE) -c sunstrm.cxx

sun5strm$(OBJPOST) : sun5strm.cxx sunstrm.h $(HEADERS) ../lib/snstream/iostrm.h
	$(CPP) -I../lib/snstream $(IPATH) $(MACRO) $(OPTIMIZE) -c sun5strm.cxx

# GNU C++ compiler ver 3.xx
gcc3strm$(OBJPOST) : gcc3strm.cxx gcc3strm.h $(HEADERS) ../lib/gcc3strm/iostrm.h
	$(CPP) -I../lib/gcc3strm $(IPATH) $(MACRO) $(OPTIMIZE) -c gcc3strm.cxx

# Intel C++ compiler
iccstrm$(OBJPOST) : iccstrm.cxx iccstrm.h $(HEADERS) ../lib/gcc3strm/iostrm.h
	$(CPP) -I../lib/iccstrm $(IPATH) $(MACRO) $(OPTIMIZE) -c iccstrm.cxx

# Use interpreted iostream
fakestrm$(OBJPOST) : fakestrm.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c fakestrm.cxx

# C compiler only
v6_dmystrm$(OBJPOST) : v6_dmystrm.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_dmystrm.cxx

# For all platform switching automatically , experimental
allstrm$(OBJPOST) : allstrm.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c allstrm.cxx

############################################################################
# SunOS 4.1 specific source
############################################################################
v6_sunos$(OBJPOST) : v6_sunos.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -DNONANSI -c v6_sunos.cxx

############################################################################
# NewsOS specific source
############################################################################
v6_new.os$(OBJPOST) : v6_new.os.c $(HEADERS)
	$(CC) $(IPATH) $(MACRO) $(OPTIMIZE) -DNONANSI -c v6_new.os.c

############################################################################
# Windows-NT specific source
############################################################################
v6_winnt$(OBJPOST) : v6_winnt.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_winnt.cxx

############################################################################
# v6_input.cxx depends on GNU readline library
############################################################################
v6_input$(OBJPOST) : v6_input.cxx $(HEADERS)
	if test -n "$(READLINEA)" && test -r $(READLINEA); \
	then \
	  $(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -DG__GNUREADLINE -c v6_input.cxx ;\
	else \
	  $(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_input.cxx;\
	fi 

############################################################################
# lconv, div_t, ldiv_t, tm struct
############################################################################
v6_stdstrct$(OBJPOST) : v6_stdstrct.cxx stdstrct.h $(HEADERS)
	$(CPP) -I../lib/stdstrct $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_stdstrct.cxx

v6_dmystrct$(OBJPOST) : v6_dmystrct.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_dmystrct.cxx

############################################################################
# To install cint core as shared library
############################################################################
$(CINTSYSDIR)/main/G__setup$(OBJPOST) : $(CINTSYSDIR)/main/G__setup.c
	$(CC) $(IPATH) $(MACRO) $(OPTIMIZE) -c $< -o $@

############################################################################
# Common sources
############################################################################
v6_auxu$(OBJPOST) : v6_auxu.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_auxu.cxx

v6_cast$(OBJPOST) : v6_cast.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_cast.cxx

v6_debug$(OBJPOST) : v6_debug.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_debug.cxx

v6_decl$(OBJPOST) : v6_decl.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_decl.cxx

v6_disp$(OBJPOST) : v6_disp.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_disp.cxx

v6_dmyinit$(OBJPOST) : v6_dmyinit.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_dmyinit.cxx

v6_dump$(OBJPOST) : v6_dump.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_dump.cxx

v6_end$(OBJPOST) : v6_end.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_end.cxx

v6_error$(OBJPOST) : v6_error.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_error.cxx

v6_expr$(OBJPOST) : v6_expr.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_expr.cxx

v6_fread$(OBJPOST) : v6_fread.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_fread.cxx

v6_func$(OBJPOST) : v6_func.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_func.cxx

v6_gcoll$(OBJPOST) : v6_gcoll.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_gcoll.cxx

v6_global1$(OBJPOST) : v6_global1.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_global1.cxx

v6_global2$(OBJPOST) : v6_global2.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_global2.cxx

g__cfunc$(OBJPOST) : g__cfunc.c $(HEADERS) $(SECURITYH)
	$(CC) $(IPATH) $(MACRO) $(OPTIMIZE) -c g__cfunc.c

v6_ifunc$(OBJPOST) : v6_ifunc.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_ifunc.cxx

v6_inherit$(OBJPOST) : v6_inherit.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_inherit.cxx

v6_init$(OBJPOST) : v6_init.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_init.cxx

v6_intrpt$(OBJPOST) : v6_intrpt.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_intrpt.cxx

v6_loadfile$(OBJPOST) : v6_loadfile.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_loadfile.cxx

v6_macro$(OBJPOST) : v6_macro.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_macro.cxx

v6_malloc$(OBJPOST) : v6_malloc.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_malloc.cxx

v6_memtest$(OBJPOST) : v6_memtest.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_memtest.cxx

v6_new$(OBJPOST) : v6_new.cxx $(HEADERS) $(SECURITYH) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_new.cxx

v6_newlink$(OBJPOST) : v6_newlink.cxx $(HEADERS) $(DLLREVH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_newlink.cxx

v6_oldlink$(OBJPOST) : v6_oldlink.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_oldlink.cxx

v6_opr$(OBJPOST) : v6_opr.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_opr.cxx

v6_parse$(OBJPOST) : v6_parse.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_parse.cxx

v6_pause$(OBJPOST) : v6_pause.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_pause.cxx

v6_pcode$(OBJPOST) : v6_pcode.cxx $(HEADERS) bc_exec_asm.h
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_pcode.cxx

v6_pragma$(OBJPOST) : v6_pragma.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_pragma.cxx

v6_quote$(OBJPOST) : v6_quote.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_quote.cxx

v6_scrupto$(OBJPOST) : v6_scrupto.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_scrupto.cxx

v6_sizeof$(OBJPOST) : v6_sizeof.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_sizeof.cxx

v6_shl$(OBJPOST) : v6_shl.cxx $(HEADERS) $(DLLREVH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_shl.cxx

v6_struct$(OBJPOST) : v6_struct.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_struct.cxx

v6_stub$(OBJPOST) : v6_stub.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_stub.cxx

v6_tmplt$(OBJPOST) : v6_tmplt.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_tmplt.cxx

v6_typedef$(OBJPOST) : v6_typedef.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_typedef.cxx

v6_val2a$(OBJPOST) : v6_val2a.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_val2a.cxx

v6_value$(OBJPOST) : v6_value.cxx $(HEADERS)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_value.cxx

v6_var$(OBJPOST) : v6_var.cxx $(HEADERS) $(SECURITYH)
	$(CPP) $(IPATH) $(MACRO) $(OPTIMIZE) -c v6_var.cxx

############################################################################
# ERTTI API
############################################################################

APIHEADER = Api.h \
	  Class.h \
	  BaseCls.h \
	  Type.h \
	  DataMbr.h \
	  Method.h \
	  MethodAr.h \
	  CallFunc.h \
	  Typedf.h \
	  Apiif.h \
          Token.h \
	  ../G__ci.h

Token$(OBJPOST) : $(APIHEADER) Token.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c Token.cxx

Typedf$(OBJPOST) : $(APIHEADER) Typedf.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c Typedf.cxx

Class$(OBJPOST) : $(APIHEADER) Class.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c Class.cxx

BaseCls$(OBJPOST) : $(APIHEADER) BaseCls.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c BaseCls.cxx
	
Type$(OBJPOST) : $(APIHEADER) Type.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c Type.cxx

DataMbr$(OBJPOST) : $(APIHEADER) DataMbr.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c DataMbr.cxx

Method$(OBJPOST) : $(APIHEADER) Method.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c Method.cxx

MethodAr$(OBJPOST) : $(APIHEADER) MethodAr.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c MethodAr.cxx

CallFunc$(OBJPOST) : $(APIHEADER) CallFunc.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c CallFunc.cxx

Api$(OBJPOST) : $(APIHEADER) Api.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c Api.cxx

Apiif$(OBJPOST) : $(APIHEADER) Apiif.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c Apiif.cxx

longif$(OBJPOST) : $(APIHEADER) longif.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c longif.cxx

longif3$(OBJPOST) : $(APIHEADER) longif3.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c longif3.cxx

############################################################################
# Cint6.x Re-engineering
############################################################################

BCHEADER = bc_autoobj.h \
	   bc_cfunc.h \
	   bc_inst.h \
	   bc_parse.h \
	   bc_reader.h \
	   bc_type.h \
	   bc_exec.h \
	   bc_vtbl.h \
	   bc_eh.h \
	   bc_debug.h \
	   bc_assign.h \
	   common.h \
	  ../G__ci.h

bc_autoobj$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_autoobj.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_autoobj.cxx

bc_cfunc$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_cfunc.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_cfunc.cxx

bc_inst$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_inst.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_inst.cxx

bc_parse$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_parse.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_parse.cxx

bc_reader$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_reader.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_reader.cxx

bc_type$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_type.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_type.cxx

bc_exec$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_exec.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_exec.cxx

bc_vtbl$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_vtbl.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_vtbl.cxx

bc_eh$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_eh.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_eh.cxx

bc_debug$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_debug.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_debug.cxx

bc_assign$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_assign.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_assign.cxx

bc_item$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_item.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_item.cxx

# Not used
bc_dict$(OBJPOST) : $(APIHEADER) $(BCHEADER) bc_dict.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c bc_dict.cxx

RFLXHEADER = rflx_gendict.h \
	     rflx_gensrc.h  \
             rflx_tools.h   \
	     ../G__ci.h

rflx_gendict$(OBJPOST) : $(RFLXHEADER) rflx_gendict.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c rflx_gendict.cxx

rflx_gensrc$(OBJPOST) : $(RFLXHEADER) rflx_gensrc.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c rflx_gensrc.cxx

rflx_tools$(OBJPOST) : $(RFLXHEADER) rflx_tools.cxx
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c rflx_tools.cxx

Shadow$(OBJPOST) : Api.h $(HEADERS)
	$(CPP) $(IPATH) $(OPTIMIZE) $(MACRO) -c Shadow.cxx

############################################################################
# clean
############################################################################
clean :
	$(RM) $(OBJECTS) $(CINTLIB) core

